<?php
/*
 * @file
 * The main code of the module.
 */

/**
 * Implements hook_menu().
 */
function yashare_counters_update_menu() {
  $items = array();

  $items['admin/config/development/yashare_counters_update'] = array(
    'title' => 'Update Yandex.Share with Counters fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yashare_counters_update_update_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Menu callback; Converter form.
 */
function yashare_counters_update_update_form() {
  $form['notice'] = array(
    '#type' => 'markup',
    '#markup' => '<i style="color:red;">' . t('It is strongly recommended to backup your database before converting.') . '</i><br/>'
  );

  $options = array();
  $types = node_type_get_types();
  foreach ($types as $type => $info) {
    $options[$type] = check_plain($info->name);
  }

  $machine_names = array_keys($options);

  $form['type'] = array(
    '#title' => t('Content type'),
    '#type' => 'select',
    '#options' => $options,
    '#description' => t('Choose a content type for updating. It must contain Yandex.Share with Counters field.'),
    '#default_value' => $machine_names[0],
  );

  // @todo: Add auto-populating of fields from the content type.

  $options = array();
  $fields = field_info_field_map();
  foreach ($fields as $name => $data) {
    if ($data['type'] == 'yashare_counters_buttons') {
      $options[$name] = $name;
    }
  }

  $machine_names = array_keys($options);

  $form['field'] = array(
    '#title' => t('Yandex.Share with Counters field'),
    '#type' => 'select',
    '#options' => $options,
    '#description' => t('Choose a field for updating.'),
    '#default_value' => $machine_names[0],
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Update all',
  );

  return $form;
}

/**
 * Submit handler for yashare_counters_update_convert_form.
 *
 * @param $form
 * @param $form_state
 */
function yashare_counters_update_update_form_submit($form, &$form_state) {
  if (form_get_errors()) {
    return;
  }

  $_SESSION['http_request_count'] = 0;

  // Start processing.
  $batch = yashare_counters_update_batch($form_state['values']['type'], $form_state['values']['field']);
  batch_set($batch);
}


/**
 * Batch definition.
 */
function yashare_counters_update_batch($type, $field) {

  $nodes = node_load_multiple(array(), array('type' => $type));

  drupal_set_message(t('Loading @num nodes of @type content type..', array('@num' => count($nodes), '@type' => $type)));

  $operations = array();

  foreach ($nodes as $node) {
    $operations[] = array('yashare_counters_update_operation', array($node, $field, t('(Node @title)', array('@title' => check_plain($node->title)))));
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'yashare_counters_update_finished',
  );
  return $batch;
}

/**
 * Batch operation for yashare_counters_update_batch: process one node.
 * This is the function that is called on each operation in yashare_counters_update_batch bach.
 */
function yashare_counters_update_operation($node, $field, $operation_details, &$context) {

  // We have single item in array $node->body[LANGUAGE_NONE] in case we translate content by nodes.
  // If entity translation mechanism is enabled then we have to process all translations.
  if (empty($node->{$field})) {
    $node->{$field} = array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => '1'
        )
      )
    );
  }
  foreach ($node->{$field} as $language => $item) {
    $node->{$field}[$language][0]['value'] = '1';
    drupal_set_message(print_r($node->{$field}, 1));
    field_attach_presave('node', $node);
    field_attach_update('node', $node);
  }

  // Store some result for post-processing in the finished callback.
  $context['results'][] = $node->nid . ' : ' . check_plain($node->title);

  // Optional message displayed under the progressbar.
  $context['message'] = t('Processing node "@title"', array('@title' => $node->title)) . ' ' . $operation_details;

  _yashare_counters_update_update_http_requests();
}

/**
 * Batch 'finished' callback used by yashare_counters_update
_batch batch.
 */
function yashare_counters_update_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('@count results processed in @requests HTTP requests.',
      array('@count' => count($results), '@requests' => _yashare_counters_update_get_http_requests())));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}

/**
 * Utility function to count the HTTP requests in a session variable.
 */
function _yashare_counters_update_update_http_requests() {
  $_SESSION['http_request_count']++;
}

function _yashare_counters_update_get_http_requests() {
  return !empty($_SESSION['http_request_count']) ? $_SESSION['http_request_count'] : 0;
}